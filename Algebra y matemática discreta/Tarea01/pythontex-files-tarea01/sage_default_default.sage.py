# -*- coding: UTF-8 -*-


# This file was *autogenerated* from the file pythontex-files-tarea01/sage_default_default.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_6 = Integer(6)


import os
import sys
import codecs

if '--interactive' not in sys.argv[_sage_const_1 :]:
    if sys.version_info[_sage_const_0 ] == _sage_const_2 :
        sys.stdout = codecs.getwriter('UTF-8')(sys.stdout, 'strict')
        sys.stderr = codecs.getwriter('UTF-8')(sys.stderr, 'strict')
    else:
        sys.stdout = codecs.getwriter('UTF-8')(sys.stdout.buffer, 'strict')
        sys.stderr = codecs.getwriter('UTF-8')(sys.stderr.buffer, 'strict')

if '/usr/share/texlive/texmf-dist/scripts/pythontex' and '/usr/share/texlive/texmf-dist/scripts/pythontex' not in sys.path:
    sys.path.append('/usr/share/texlive/texmf-dist/scripts/pythontex')
from pythontex_utils import PythonTeXUtils
pytex = PythonTeXUtils()

pytex.docdir = os.getcwd()
if os.path.isdir('.'):
    os.chdir('.')
    if os.getcwd() not in sys.path:
        sys.path.append(os.getcwd())
else:
    if len(sys.argv) < _sage_const_2  or sys.argv[_sage_const_1 ] != '--manual':
        sys.exit('Cannot find directory .')
if pytex.docdir not in sys.path:
    sys.path.append(pytex.docdir)

pytex.formatter = latex


pytex.id = 'sage_default_default'
pytex.family = 'sage'
pytex.session = 'default'
pytex.restart = 'default'

pytex.command = 'block'
pytex.set_context('')
pytex.args = ''
pytex.instance = '0'
pytex.line = '28'

print('=>PYTHONTEX:STDOUT#0#block#')
sys.stderr.write('=>PYTHONTEX:STDERR#0#block#\n')
pytex.before()
A = matrix(QQ,[[_sage_const_1 ,_sage_const_1 /_sage_const_2 ,_sage_const_0 ,_sage_const_2 ,_sage_const_1 ,_sage_const_2 ],[_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_3 ,-_sage_const_1 ,_sage_const_0 ]])
pytex.after()
pytex.command = 'i'
pytex.set_context('')
pytex.args = ''
pytex.instance = '1'
pytex.line = '30'

print('=>PYTHONTEX:STDOUT#1#i#')
sys.stderr.write('=>PYTHONTEX:STDERR#1#i#\n')
pytex.before()
print(pytex.formatter(A))
pytex.after()
pytex.command = 'block'
pytex.set_context('')
pytex.args = ''
pytex.instance = '2'
pytex.line = '71'

print('=>PYTHONTEX:STDOUT#2#block#')
sys.stderr.write('=>PYTHONTEX:STDERR#2#block#\n')
pytex.before()
P = QQ['alpha0, alpha1, beta0, beta1']; (alpha0, alpha1, beta0, beta1,) = P._first_ngens(4)
A = matrix(QQ,[[_sage_const_1 ,_sage_const_1 /_sage_const_2 ,_sage_const_0 ,_sage_const_2 ,_sage_const_1 ,_sage_const_2 ],[_sage_const_0 ,_sage_const_0 ,_sage_const_1 ,_sage_const_3 ,-_sage_const_1 ,_sage_const_0 ]])
B = matrix(P, [ [alpha0, beta0], [alpha1, beta1] ])
M = matrix(P, _sage_const_4 , _sage_const_6 )
M[:_sage_const_2 ,:] = A
M[_sage_const_2 , _sage_const_1 ] = _sage_const_1 
M[_sage_const_3 , _sage_const_3 ] = _sage_const_1 
M[_sage_const_2 :_sage_const_4 , _sage_const_4 :_sage_const_6 ] = B
M.subdivide(_sage_const_2 , _sage_const_4 )
pytex.after()
pytex.command = 'i'
pytex.set_context('')
pytex.args = ''
pytex.instance = '3'
pytex.line = '83'

print('=>PYTHONTEX:STDOUT#3#i#')
sys.stderr.write('=>PYTHONTEX:STDERR#3#i#\n')
pytex.before()
print(pytex.formatter(M))
pytex.after()
pytex.command = 'i'
pytex.set_context('')
pytex.args = ''
pytex.instance = '4'
pytex.line = '85'

print('=>PYTHONTEX:STDOUT#4#i#')
sys.stderr.write('=>PYTHONTEX:STDERR#4#i#\n')
pytex.before()
print(pytex.formatter(A))
pytex.after()
pytex.command = 'i'
pytex.set_context('')
pytex.args = ''
pytex.instance = '5'
pytex.line = '85'

print('=>PYTHONTEX:STDOUT#5#i#')
sys.stderr.write('=>PYTHONTEX:STDERR#5#i#\n')
pytex.before()
print(pytex.formatter(B))
pytex.after()


pytex.cleanup()

