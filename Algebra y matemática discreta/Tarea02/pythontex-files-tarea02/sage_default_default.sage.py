# -*- coding: UTF-8 -*-


# This file was *autogenerated* from the file pythontex-files-tarea02/sage_default_default.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_5 = Integer(5); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_9 = Integer(9); _sage_const_12 = Integer(12); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6)


import os
import sys
import codecs

if '--interactive' not in sys.argv[_sage_const_1 :]:
    if sys.version_info[_sage_const_0 ] == _sage_const_2 :
        sys.stdout = codecs.getwriter('UTF-8')(sys.stdout, 'strict')
        sys.stderr = codecs.getwriter('UTF-8')(sys.stderr, 'strict')
    else:
        sys.stdout = codecs.getwriter('UTF-8')(sys.stdout.buffer, 'strict')
        sys.stderr = codecs.getwriter('UTF-8')(sys.stderr.buffer, 'strict')

if '/usr/share/texlive/texmf-dist/scripts/pythontex' and '/usr/share/texlive/texmf-dist/scripts/pythontex' not in sys.path:
    sys.path.append('/usr/share/texlive/texmf-dist/scripts/pythontex')
from pythontex_utils import PythonTeXUtils
pytex = PythonTeXUtils()

pytex.docdir = os.getcwd()
if os.path.isdir('.'):
    os.chdir('.')
    if os.getcwd() not in sys.path:
        sys.path.append(os.getcwd())
else:
    if len(sys.argv) < _sage_const_2  or sys.argv[_sage_const_1 ] != '--manual':
        sys.exit('Cannot find directory .')
if pytex.docdir not in sys.path:
    sys.path.append(pytex.docdir)

pytex.formatter = latex


pytex.id = 'sage_default_default'
pytex.family = 'sage'
pytex.session = 'default'
pytex.restart = 'default'

pytex.command = 'block'
pytex.set_context('')
pytex.args = ''
pytex.instance = '0'
pytex.line = '40'

print('=>PYTHONTEX:STDOUT#0#block#')
sys.stderr.write('=>PYTHONTEX:STDERR#0#block#\n')
pytex.before()
P = QQ['a, b']; (a, b,) = P._first_ngens(2)
A = matrix(QQ, [[_sage_const_2 , _sage_const_0 , _sage_const_2 ], [_sage_const_1 , _sage_const_2 , -_sage_const_5 ], [-_sage_const_1 , -_sage_const_1 , _sage_const_2 ], [_sage_const_0 , _sage_const_1 /_sage_const_2 , -_sage_const_3 /_sage_const_2 ]])
B = matrix(P, [[b, -_sage_const_2 , -_sage_const_4 ], [-a, _sage_const_9 , _sage_const_12 ], [a, _sage_const_2 *b, a + _sage_const_3 *b], [_sage_const_0 , _sage_const_5 /_sage_const_2 , _sage_const_7 /_sage_const_2 ]])
AB = block_matrix([ [A, B] ])
R = AB.echelon_form()
R1 = R(a = _sage_const_1 , b = -_sage_const_2 )
R1.subdivide(_sage_const_2 , _sage_const_3 )
R2 = R1[:_sage_const_2 , :]
R2.subdivide([], _sage_const_3 )
P = QQ['alpha1, alpha2, alpha3']; (alpha1, alpha2, alpha3,) = P._first_ngens(3)
M = matrix(P, _sage_const_3 , _sage_const_6 )
M[:_sage_const_2 , :] = R2
M[_sage_const_2 , _sage_const_2 ] = _sage_const_1 
M[_sage_const_2 , _sage_const_3 ] = alpha1
M[_sage_const_2 , _sage_const_4 ] = alpha2
M[_sage_const_2 , _sage_const_5 ] = alpha3
M.subdivide([], _sage_const_3 )
MR = M.echelon_form()
X = MR.subdivision(_sage_const_0 , _sage_const_1 )
pytex.after()
pytex.command = 'i'
pytex.set_context('')
pytex.args = ''
pytex.instance = '1'
pytex.line = '62'

print('=>PYTHONTEX:STDOUT#1#i#')
sys.stderr.write('=>PYTHONTEX:STDERR#1#i#\n')
pytex.before()
print(pytex.formatter(AB))
pytex.after()
pytex.command = 'i'
pytex.set_context('')
pytex.args = ''
pytex.instance = '2'
pytex.line = '63'

print('=>PYTHONTEX:STDOUT#2#i#')
sys.stderr.write('=>PYTHONTEX:STDERR#2#i#\n')
pytex.before()
print(pytex.formatter(R))
pytex.after()
pytex.command = 'i'
pytex.set_context('')
pytex.args = ''
pytex.instance = '3'
pytex.line = '65'

print('=>PYTHONTEX:STDOUT#3#i#')
sys.stderr.write('=>PYTHONTEX:STDERR#3#i#\n')
pytex.before()
print(pytex.formatter(R1))
pytex.after()


pytex.cleanup()

